/**
* Names:Chen Jia ; Qian Xiong
* Computing IDs: cj3fj; qx2dk
* Lab Section:104   
* Date:11/9/2013
*/

import java.awt.Rectangle;
import java.util.ArrayList;

/**
 * Zombie.java
 * 
 * The class representing the Zombie object in the game. This class needs to
 * have some representation of current location, a reference to its target (aka
 * the Human), a speed, and a Rectangle representing its hitbox. It might also
 * help to have variables representing the size of both the Zombie and its
 * hitbox. You should create methods for the following: 1. checking to see if
 * this Zombie's hitbox Rectangle is colliding with any other hitbox Rectangle
 * (either the Human or an obstacle Rectangle) 2. movement (normal movement and
 * what to do if there is a collision) 3. constructors 4. getters/setters 5.
 * anything else you may need.
 * 
 * @authors
 * @compids
 * @lab
 */
public class Zombie {
	private float x;
	private float y;
	private float width = 75;
	private float height = 100;
	private float v = 15;
	private Rectangle hitbox = new Rectangle();
	private Human target;
	private ArrayList<Rectangle> oblist;
	private int zombielevel;

	public int getZombielevel() {
		return zombielevel;
	}

	public void setZombielevel(int zombielevel) {
		this.zombielevel = zombielevel;
	}

	public boolean intersectwhuman() {
		if (hitbox.intersects(target.getHitbox())) {
			return true;
		} else {
			return false;
		}
	}

	public int zombieCombine(ArrayList<Zombie> zlist) {
		ArrayList<Integer> index = new ArrayList<Integer>();
		for (int i = 0; i < zlist.size(); i++) {
			if (x - zlist.get(i).x > -20 && x - zlist.get(i).x < 20
					&& y - zlist.get(i).y < 30 && y - zlist.get(i).y > -30) {
				index.add(i);
			}
		}
		if (index.size() == 2) {

			if (zlist.get(index.get(0)).zombielevel >= zlist.get(index.get(1)).zombielevel) {
				zlist.get(index.get(0)).levelUp();
				return index.get(1);
			} else {
				zlist.get(index.get(1)).levelUp();
				return index.get(0);
			}

		} else {
			return -1;
		}
	}

	public boolean zombieDie() {
		if (hitbox.getCenterX() - target.getX() - target.getWidth() / 2 > -75
				&& hitbox.getCenterX() - target.getX() - target.getWidth() / 2 < 75
				&& hitbox.getCenterY() - target.getY() - target.getHeight() / 2 > -100
				&& hitbox.getCenterY() - target.getY() - target.getHeight() / 2 < 100) {
			return true;
		} else {
			return false;
		}
	}

	private void levelUp() {
		zombielevel++;
		v += 5;
	}

	public void move(float elapsedTime) {
		float dx;
		float dy;
		if (target.getX() - this.x - width / 2 + target.getWidth() / 2 > 0) {
			dx = v;
			for (int i = 0; i < oblist.size(); i++) {
				if (hitbox.intersects(oblist.get(i))) {
					if (hitbox.x > oblist.get(i).x) {
						dx = v;
					} else {
						dx = -v;
					}
				}
			}
		} else if (target.getX() - this.x - width / 2 + target.getWidth() / 2 < 0) {
			dx = -v;
			for (int i = 0; i < oblist.size(); i++) {
				if (hitbox.intersects(oblist.get(i))) {
					if (hitbox.x + hitbox.width > oblist.get(i).getMaxX()) {
						dx = v;
					} else {
						dx = -v;
					}
				}
			}
		} else {
			dx = 0;
		}
		if (target.getY() - this.y - height / 2 + target.getHeight() / 2 > 0) {
			dy = v;
			for (int i = 0; i < oblist.size(); i++) {
				if (hitbox.intersects(oblist.get(i))) {
					if (hitbox.y > oblist.get(i).y) {
						dy = v;
					} else {
						dy = -v;
					}
				}
			}
		} else if (target.getY() - this.y - height / 2 + target.getHeight() / 2 < 0) {
			dy = -v;
			for (int i = 0; i < oblist.size(); i++) {
				if (hitbox.intersects(oblist.get(i))) {
					if (hitbox.y + hitbox.height > oblist.get(i).getMaxY()) {
						dy = v;
					} else {
						dy = -v;
					}
				}
			}
		} else {
			dy = 0;
		}
		x += dx * elapsedTime;
		hitbox.x = (int) (x + width / 2 - hitbox.width / 2 + 0.5);
		y += dy * elapsedTime;
		hitbox.y = (int) (y + height / 2 - hitbox.height / 2 + 0.5);
	}

	public Rectangle getHitbox() {
		return hitbox;
	}

	public void setHitbox(Rectangle hitbox) {
		this.hitbox = hitbox;
	}

	public float getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public float getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}

	public double getV() {
		return v;
	}

	public void setV(int v) {
		this.v = v;
	}

	public Zombie(int x, int y, Human target, ArrayList<Rectangle> oblist) {
		super();
		this.x = x;
		hitbox.x = (int) (x + 0.5);
		this.y = y;
		hitbox.y = (int) (y + 0.5);
		hitbox.height = 60;
		hitbox.width = 30;
		this.target = target;
		this.oblist = oblist;
		zombielevel = 1;
	}

	public Human getTarget() {
		return target;
	}

	public void setTarget(Human target) {
		this.target = target;
	}

}
